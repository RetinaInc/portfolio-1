var app=angular.module("ng-portfolio",["ui.router","ui.bootstrap","ngTable","hc.marked","ngTagsInput"]);app.config(function($httpProvider){$httpProvider.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";$httpProvider.interceptors.push("HttpInterceptor")});app.config(function(tagsInputConfigProvider){tagsInputConfigProvider.setDefaults("tagsInput",{replaceSpacesWithDashes:false})});app.config(["markedProvider",function(markedProvider){markedProvider.setOptions({gfm:true,tables:true})}]);app.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/dashboard");$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"/vendor/portfolio/admin/views/dashboard.html",controller:"DashboardController"}).state("project",{url:"/project",templateUrl:"/vendor/portfolio/admin/views/project/project.html"}).state("project.index",{url:"/index",templateUrl:"/vendor/portfolio/admin/views/project/project.index.html",controller:"ProjectController"}).state("project.create",{url:"/create",templateUrl:"/vendor/portfolio/admin/views/project/project.edit.html",controller:"ProjectCreateController"}).state("project.edit",{url:"/:id/edit",templateUrl:"/vendor/portfolio/admin/views/project/project.edit.html",controller:"ProjectEditController"}).state("tag",{url:"/tag",templateUrl:"/vendor/portfolio/admin/views/tag/tag.html"}).state("tag.index",{url:"/index",templateUrl:"/vendor/portfolio/admin/views/tag/tag.index.html",controller:"TagController"}).state("tag.create",{url:"/create",templateUrl:"/vendor/portfolio/admin/views/tag/tag.edit.html",controller:"TagCreateController"}).state("tag.edit",{url:"/:id/edit",templateUrl:"/vendor/portfolio/admin/views/tag/tag.edit.html",controller:"TagEditController"})});app.factory("RestfulApi",function(){return{getRoute:function(resource,method,id){if(typeof id==="undefined"){id="0"}var prefix="/api";var routes={project:{index:prefix+"/project",show:prefix+"/project/"+id,store:prefix+"/project",update:prefix+"/project/"+id,destroy:prefix+"/project/"+id},section:{index:prefix+"/section",show:prefix+"/section/"+id,store:prefix+"/section",update:prefix+"/section/"+id,destroy:prefix+"/section/"+id},projectSection:{store:prefix+"/project/"+id+"/section"},tag:{index:prefix+"/tag",show:prefix+"/tag/"+id,store:prefix+"/tag",update:prefix+"/tag/"+id,destroy:prefix+"/tag/"+id}};return routes[resource][method]}}});app.factory("HttpInterceptor",function($q,notificationService){var checkResponseCode=function(data,status){switch(status){case 422:notificationService.clear();var msg=[];angular.forEach(data,function(value,key){msg=msg.concat(value)});notificationService.add("Validation failed, please correct the following issues:","danger",msg);break;case 401:notificationService.add("You have been logged out","warning");break;case 500:notificationService.add("API error","danger");break;default:console.log("Some other problem!");console.log(data)}};return{request:function(config){return config},requestError:function(rejection){if(canRecover(rejection)){return responseOrNewPromise}return $q.reject(rejection)},response:function(response){notificationService.removeByType("danger");return response},responseError:function(rejection){checkResponseCode(rejection.data,rejection.status);console.log(rejection);if(canRecover(rejection)){return responseOrNewPromise}return $q.reject(rejection)}}});app.service("notificationService",function($timeout){var notifications=[];this.get=function(){return notifications};this.add=function(message,type,messages){if(type=="success"){this.removeByType("success")}var notification={type:type,message:message,messages:messages};notifications.push(notification);console.log("added "+type+" message");if(type!="danger"){$timeout(function(){notifications.splice(notifications.indexOf(notification),1)},6e3)}};this.removeByIndex=function(index){console.log("removing one message: "+index);notifications.splice(index,1)};this.removeByType=function(type){console.log("clearing "+type+" messages");for(i=0;i<notifications.length;i++){if(notifications[i].type==type){notifications.splice(i,1)}}};this.clear=function(){console.log("clearing all messages");notifications=[]}});app.controller("NotificationController",function($scope,notificationService,$timeout){$scope.notifier=notificationService;$scope.$watch("notifier.get()",function(notifications){if(angular.isDefined(notifications)){$scope.notifications=notifications}},true);$scope.closeNotification=function(index){notificationService.removeByIndex(index)}});app.controller("DashboardController",function($scope,$http,$stateParams){});app.controller("ProjectController",function($scope,$filter,ngTableParams,$http,RestfulApi,notificationService){$scope.data=[];$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{updated_at:"desc"}},{filterDelay:10,total:$scope.data.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data,params.filter()):$scope.data;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$scope.init=function(){$http.get(RestfulApi.getRoute("project","index")).success(function(data){$scope.data=data;$scope.tableParams.reload()})};$scope.delete=function(id,title){if(confirm("Are you sure you wish to delete "+title+"?")){$http.delete("/admin/api/project/"+id).success(function(data){notificationService.add("Project '"+data.title+"' deleted successfully","info");$scope.init()}).error(function(data){$scope.errors=data})}};$scope.init()});app.controller("ProjectCreateController",function($scope,$http,$stateParams,$state,RestfulApi,notificationService){$scope.data={};$scope.create=true;$scope.save=function(apply){$http.post(RestfulApi.getRoute("project","store"),$scope.data).success(function(data){notificationService.add("Project '"+data.title+"' added successfully","success");$scope.errors=[];if(!apply){$state.go("project.index")}else{$state.go("project.edit",{id:data.id})}}).error(function(data){$scope.errors=data})}});app.controller("ProjectEditController",function($scope,$http,$stateParams,$state,RestfulApi,notificationService,ngTableParams,$filter,$modal){$scope.data={sections:[]};$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{updated_at:"desc"}},{filterDelay:10,total:$scope.data.sections.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data.sections,params.filter()):$scope.data.sections;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data.sections;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$http.get(RestfulApi.getRoute("project","show",$stateParams.id)).success(function(data){$scope.data=data;$scope.slug=$scope.data.slug;$scope.tableParams.reload()}).error(function(data,status,headers,config){$scope.errors=data});$scope.editSection=function(create,sectionId){sectionId=typeof sectionId!=="undefined"?sectionId:false;modalData={create:create,projectId:$scope.data.id,sectionId:sectionId};console.log(modalData);var modalInstance=$modal.open({animation:true,templateUrl:"sectionEdit.html",controller:"editSectionController",size:"lg",resolve:{modalData:function(){return modalData}}});modalInstance.result.then(function(section){console.log("modal closed");console.log(section);if(create){$scope.data.sections.push(section)}else{angular.forEach($scope.data.sections,function(value,key){if(value.id==sectionId){console.log("updated section: "+value.id);$scope.data.sections[key]=section}})}console.log($scope.data.sections);$scope.tableParams.reload()})};$scope.slugWarning=function(){notificationService.removeByType("warning");if($scope.slug!=$scope.data.slug){notificationService.add("You have modified the project slug. Please be aware that this may break hyperlinks to this project.","warning")}};$scope.save=function(apply){apply=typeof apply!=="undefined"?apply:false;if($scope.slug!=$scope.data.slug){if(confirm("Are you sure you wish to change the slug?")){$scope.put(apply)}else{$scope.data.slug=$scope.slug;notificationService.removeByType("warning");notificationService.add("Slug reset","info")}}else{$scope.put(apply)}};$scope.put=function(apply){$http.put(RestfulApi.getRoute("project","update",$stateParams.id),$scope.data).success(function(data){notificationService.add("Project '"+data.title+"' updated successfully","success");$scope.errors=[];if(!apply){$state.go("project.index")}}).error(function(data){$scope.errors=data})}});app.controller("editSectionController",function($scope,$http,$modalInstance,RestfulApi,notificationService,modalData){if(!modalData.create){$http.get(RestfulApi.getRoute("section","show",modalData.sectionId)).success(function(data){$scope.section=data}).error(function(data){$scope.errors=data})}$scope.save=function(){console.log(modalData.create);if(modalData.create){console.log("creating");$http.post(RestfulApi.getRoute("projectSection","store",modalData.projectId),$scope.section).success(function(data){notificationService.add("Section '"+data.title+"' created successfully","success");$scope.errors=[];$modalInstance.close(data)}).error(function(data){$scope.errors=data})}else{console.log("editing");$http.put(RestfulApi.getRoute("section","update",$scope.section.id),$scope.section).success(function(data){notificationService.add("Section '"+data.title+"' updated successfully","success");$scope.errors=[];$modalInstance.close(data)}).error(function(data){$scope.errors=data})}};$scope.cancel=function(){$modalInstance.dismiss("cancel")}});app.controller("TagController",function($scope,$filter,ngTableParams,$http,notificationService){$scope.data=[];$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{updated_at:"desc"}},{filterDelay:10,total:$scope.data.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data,params.filter()):$scope.data;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$scope.init=function(){$http.get("/api/tag").success(function(data){$scope.data=data;$scope.tableParams.reload()})};$scope.delete=function(id,title){if(confirm("Are you sure you wish to delete "+title+"?")){$http.delete("/api/tag/"+id).success(function(data){notificationService.add("Project '"+data.title+"' deleted successfully","info");$scope.init()}).error(function(data){$scope.errors=data})}};$scope.init()});app.controller("TagCreateController",function($scope,$http,$stateParams,$state,notificationService){$scope.data={};$scope.save=function(apply){$http.post("/api/tag",$scope.data).success(function(data){notificationService.add("Tag '"+data.title+"' added successfully","success");$scope.errors=[];if(!apply){$state.go("tag.index")}else{$state.go("tag.edit",{id:data.id})}}).error(function(data){$scope.errors=data})}});app.controller("TagEditController",function($scope,$http,$stateParams,$state,notificationService,ngTableParams,$filter,$modal){$scope.data={projects:[]};$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{updated_at:"desc"}},{filterDelay:10,total:$scope.data.projects.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data.projects,params.filter()):$scope.data.projects;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data.projects;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$http.get("/api/tag/"+$stateParams.id).success(function(data){$scope.data=data;$scope.tableParams.reload()}).error(function(data){$scope.errors=data});$scope.save=function(apply){apply=typeof apply!=="undefined"?apply:false;$http.put("/api/tag/"+$stateParams.id,$scope.data).success(function(data){notificationService.add("Tag '"+data.title+"' updated successfully","success");$scope.errors=[];if(!apply){$state.go("tag.index")}}).error(function(data){$scope.errors=data})}});
//# sourceMappingURL=data:application/json;base64,