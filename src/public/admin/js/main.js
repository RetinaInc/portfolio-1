var app=angular.module("ng-portfolio",["ui.router","ui.bootstrap","ngTable"]);app.config(function($httpProvider){$httpProvider.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"});app.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/dashboard");$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"/vendor/portfolio/admin/views/dashboard.html",controller:"DashboardController"}).state("project",{url:"/project",templateUrl:"/vendor/portfolio/admin/views/project/project.html"}).state("project.index",{url:"/index",templateUrl:"/vendor/portfolio/admin/views/project/project.index.html",controller:"ProjectController"}).state("project.create",{url:"/create",templateUrl:"/vendor/portfolio/admin/views/project/project.edit.html",controller:"ProjectCreateController"}).state("project.edit",{url:"/:id/edit",templateUrl:"/vendor/portfolio/admin/views/project/project.edit.html",controller:"ProjectEditController"}).state("project-section",{url:"/project/:id/section",templateUrl:"/vendor/portfolio/admin/views/project/project.section.index.html",controller:"ProjectSectionController"}).state("section-edit",{url:"/section/:id/edit",templateUrl:"/vendor/portfolio/admin/views/section/section.edit.html",controller:"SectionEditController"})});app.factory("RestfulApi",function($http,messageBag){var checkResponseCode=function(data,status){switch(status){case 422:console.log("Model validation error");console.log(data);break;case 401:console.log("You have been logged out. Refresh the page to log back in again");break;case 500:console.log("API Error");break;default:console.log("Some other problem!");console.log(data)}};return{getRoute:function(resource,method,id){if(typeof id==="undefined"){id="0"}var prefix="/admin/api";var routes={project:{index:prefix+"/project",show:prefix+"/project/"+id,store:prefix+"/project/",update:prefix+"/project/"+id,destroy:prefix+"/project/"+id},section:{index:prefix+"/section",show:prefix+"/section/"+id,store:prefix+"/section/",update:prefix+"/section/"+id,destroy:prefix+"/section/"+id}};return routes[resource][method]},success:function(data,status,headers,config){console.log("API Request successful")},error:function(data,status,headers,config){checkResponseCode(data,status);return data}}});app.factory("messageBag",function($http){var ApiError=function(){};return{success:function(data,status,headers,config){console.log(data);if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}}}});app.controller("DashboardController",function($scope,$http,$stateParams){});app.controller("ProjectController",function($scope,$filter,ngTableParams,$http,RestfulApi){$scope.data=[];$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{updated_at:"desc"}},{filterDelay:10,total:$scope.data.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data,params.filter()):$scope.data;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$scope.init=function(){$http.get(RestfulApi.getRoute("project","index")).success(function(data,status,headers,config){RestfulApi.success(data,status,headers,config);$scope.data=data;$scope.tableParams.reload()}).error(function(data,status,headers,config){RestfulApi.error(data,status,headers,config)})};$scope.delete=function(id){$http.delete("/admin/api/project/"+id).success(function(data,status,headers,config){$scope.init()}).error(function(data,status,headers,config){$scope.errors=data})};$scope.init()});app.controller("ProjectCreateController",function($scope,$http,$stateParams,$location,RestfulApi){$scope.data={};$scope.save=function(){$http.post(RestfulApi.getRoute("project","create"),$scope.data).success(function(data,status,headers,config){$location.path("/project")}).error(function(data,status,headers,config){RestfulApi.error(data,status,headers,config)})}});app.controller("ProjectEditController",function($scope,$http,$stateParams,$location,RestfulApi){$scope.data={};$http.get(RestfulApi.getRoute("project","show",$stateParams.id)).success(function(data,status,headers,config){$scope.data=data}).error(function(data,status,headers,config){if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}});$scope.addSection=function(){$scope.data.sections.push({})};$scope.deleteSection=function(index){$scope.data.sections.splice(index,1)};$scope.save=function(){$http.put(RestfulApi.getRoute("project","update",$stateParams.id),$scope.data).success(function(data,status,headers,config){$location.path("/project/index")}).error(function(data,status,headers,config){$scope.errors=RestfulApi.error(data,status,headers,config)})}});app.controller("ProjectSectionController",function($scope,$filter,ngTableParams,$http,$route,$routeParams,$location){$scope.data=[];$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{created_at:"desc"}},{filterDelay:10,total:$scope.data.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data,params.filter()):$scope.data;var orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data;params.total(orderedData.length);$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}});$scope.init=function(){console.log($routeParams.project_id);$http.get("/admin/api/project/"+$routeParams.project_id+"/section").success(function(data,status,headers,config){$scope.data=data;angular.forEach(data,function(data){data.id=parseFloat(data.id)});$scope.tableParams.reload()}).error(function(data,status,headers,config){console.log(status);if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}})};$scope.delete=function(id){$http.delete("/admin/api/project/"+id).success(function(data,status,headers,config){$scope.init()}).error(function(data,status,headers,config){$scope.errors=data})};$scope.init()});app.controller("SectionCreateController",function($scope,$http,$route,$routeParams,$location){$scope.data={};$scope.save=function(){$http.post("/admin/api/project",$scope.data).success(function(data,status,headers,config){$location.path("/project")}).error(function(data,status,headers,config){if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}})}});app.controller("SectionEditController",function($scope,$http,$route,$routeParams,$location){$scope.data={};$http.get("/admin/api/section/"+$routeParams.id).success(function(data,status,headers,config){$scope.data=data}).error(function(data,status,headers,config){if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}});$scope.addSection=function(){$scope.data.sections.push({})};$scope.deleteSection=function(index){$scope.data.sections.splice(index,1)};$scope.save=function(){$http.put("/admin/api/section/"+$routeParams.id,$scope.data).success(function(data,status,headers,config){$location.path("/project/"+data.attachment_id+"/section")}).error(function(data,status,headers,config){if(status==401){$scope.errors=[{"Logged out":"You have been logged out. Refresh the page to log back in again"}]}else{$scope.errors=data}})}});
//# sourceMappingURL=data:application/json;base64,